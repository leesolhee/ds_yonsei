---
title: "dataframe"
author: "solhee"
date: "2019년 4월 11일"
output: html_document
editor_options :
  chunk_output_type : console

---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

##데이터 확인

```{r}
datasets::mtcars #::치면 사용가능한 parameter 나옴

colnames(mtcars)
nrow(mtcars)
str(mtcars)
summary(mtcars)
View(mtcars) #데이터가 많을 때는 시각적으로 데이터 이해하기 어렵다. 그래서 위에 코드로 확인하는게 더 나음.
```

제일 **중요한 변수**가 뭘까?
- 핵심은 **연비**(mtcars)


```{r}
str(mtcars)
```

위 자료를 보면 dummy 변수 역할을 하는 am변수가 num자료형으로 되어있는 것을 확인할 수 있음. dummy변수는 factor 자료형으로 인식되는게 좋당. 

##tidyverse 구문

데이터 프레임은 각 변수당 행렬 크기가 맞지 않으면 만들 수 없다는 것 유의

|통계|전산|
|-|:-:|
|변수|column|
|obs|records|
|dataframe|table|

|SQL|Tidyverse|
|-|:-:|
|where|select|
|orderby|arrange|
|mutate|mutate|
|summarise|summarise|

mutate : 새로운 column 생성

```{r echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
```


```{r}
mtcars %>%
  select(mpg, am, wt, hp) %>% #mtcars의 변수 중 4개만 선택  
  filter(mpg > 25) %>% 
  arrange(desc(mpg)) %>% #역순 정렬 원하면 desc o.w arrange(mpg)  
  mutate(metric = hp/wt)
```



```{r}
mtcars %>%
  mutate(auto_yn=ifelse(am==1,"수동","Auto")) %>%
  group_by(auto_yn) %>%
  summarise(mean_mpg=mean(mpg),
            median_mpg=median(mpg),
            std_mpg=sd(mpg),
            min_mpg=min(mpg),
            max_mpg=max(mpg), num=n())
```

```{r}
mpg_v <- mtcars$mpg

mtcars[, 1:3]
numeric_col <- c(1,3,7)

mtcars[, numeric_col]
mtcars[3,10]

mtcars[, -c(1,3,5)] #this is not recommened because of the change of the real data.
```

```{R}
mtcars_df <- mtcars %>%
  rownames_to_column(var = 'car_name') %>% 
  tbl_df()
#change the rownames to column's variable 'car_name'

mtcars_df %>% 
  head()

mtcars_df %>% 
  group_by(am) %>% 
  sample_frac(0.1) #Stratified SRS

mtcars_df %>% 
  sample_frac(0.2) #SRS 
```

```{r}
superheroes <- "
    name, alignment, gender,         publisher
 Magneto,       bad,   male,            Marvel
   Storm,      good, female,            Marvel
Mystique,       bad, female,            Marvel
  Batman,      good,   male,                DC
   Joker,       bad,   male,                DC
Catwoman,       bad, female,                DC
 Hellboy,      good,   male, Dark Horse Comics
"
#trim_ws : 데이터 쉼표 간 whitespace 제거
superheroes <- read_csv(superheroes, trim_ws = TRUE, skip = 1)

publishers <- "
  publisher, yr_founded
         DC,       1934
     Marvel,       1939
      Image,       1992
"
publishers <- read_csv(publishers, trim_ws = TRUE, skip = 1)
```

```{r}
left_join(superheroes, publishers)
left_join(superheroes, publishers, by="publisher")
right_join(superheroes, publishers, by="publisher")
# 위 두개는 결과 같다. 즉 by의 default는 두 데이터프레임의 겹치는 variable
#left_join이니까 superheroes의 publisher data 기준으로 생성

inner_join(superheroes, publishers, by="publisher") #by 기준 짝 안 맞는 애들은 알아서 걸러냄. 즉, 짝 맞는 애들만 보고 싶을 떄 사용하면 좋음.
full_join(superheroes, publishers, by="publisher") #by 기준 다 고려 즉, 전체 데이터의 연결고리 확인하고 싶을 때 사용하면 좋아용
```

[{click) SQL join procedure visualization](https://statkclee.github.io/data-science/ds-dplyr-join.html#3_r%EA%B3%BC_sql_%EB%B9%84%EA%B5%90)