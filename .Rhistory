as.numeric(BMI_factor)
```
1. #tribble : 첫 줄 데이터 형태대로 긁어오는 방법
```{r}
data <- tribble(~"가명", ~"체중", ~"키", ~"재산",
"아이언맨", 70, 185, 1000,
'이기쁨', 48, 162, 1300,
'어피치', 40, 100, 999999999,
'무지', 20, 50, 999999999,
'뽀로로', 30, 50, 0,
'이상완', 100, 200,10000,
'곰돌이푸',20,85,1600000000000,
'B', 73.13, 183, 105,
'F', 45, 165, 10000000000000,
'YEAH', 170, 48, 10000,
'토르', 85, 185, 9999999999999,
'AA', 60, 100, 10000000,
'AAA', 76, 111, 10093,
'배수한', 180, 64, 1000,
'지현이', 46, 175,100000000000000000000000,
'응통', 50, 150, 7500,
'마라탕' ,1,30,12345678,
'금순이', 45, 156, 50000,
'이동석', 177, 68, 10000000000000,
'김원채',45,168,50000000,
'피카츄',100,50,1000000,
'abc', 50, 150, 3000)
class(data)
data
```
2. 클립보드(ctrl+c)에 저장되어있는 그대로 데이터프레임 만드는 법
```{r}
data2 = read.csv("clipboard")
summary(data2)
class(data2)
```
3. 임의로 csv 파일 바로 만들어서 데이터 프레임 만드는 법
```{r import-csv-file}
pokemon_df <- read_csv("C:/Users/thfgm/Desktop/pokemon.csv",
col_types = cols(
가명 = col_character(),
체중 = col_double(),
키 = col_double(),
재산 = col_double()
))
print(pokemon_df)
model_df <- pokemon_df %>%
mutate(부자여부 = ifelse(재산 > median(pokemon_df$재산), "부자", "안부자")) %>%
mutate(부자여부 = factor(부자여부, levels=c("안부자", "부자"))) %>%
select(-가명)
model_df %>%
DT::datatable()
```
```{r}
BMI_df = data.frame("BMI" = BMI, "BMI_요인"=BMI_factor, "BMI_문자열"=BMI_string)
View(BMI_df)
```
pokemon_df <- read_csv("C:/Users/thfgm/Desktop/pokemon.csv",
col_types = cols(
가명 = col_character(),
체중 = col_double(),
키 = col_double(),
재산 = col_double()
))
print(pokemon_df)
model_df <- pokemon_df %>%
mutate(부자여부 = ifelse(재산 > median(pokemon_df$재산), "부자", "안부자")) %>%
mutate(부자여부 = factor(부자여부, levels=c("안부자", "부자"))) %>%
select(-가명)
pokemon_df <- read_csv("C:/Users/thfgm/Desktop/pokemon.csv",
col_types = cols(
가명 = col_character(),
체중 = col_double(),
키 = col_double(),
재산 = col_double()
))
print(pokemon_df)
model_df <- pokemon_df %>%
mutate(부자여부 = ifelse(재산 > median(pokemon_df$재산), "부자", "안부자")) %>%
mutate(부자여부 = factor(부자여부, levels=c("안부자", "부자"))) %>%
select(-가명)
summary(pokemon_df)
knitr::opts_chunk$set(echo = TRUE)
hist(rnorm(100))
height <- c(170, 180, 190, 185)
height * 1.01 #계산이 됩니당
weight <- c(70, 80, 90, 80)
BMI <- weight/ height^2
library(tidyverse)
BMI_string <- c("비만", "저체중", "정상", "정상")
BMI_string
paste(BMI_string, collapse = "+")
paste(BMI_string, collapse = ",")
BMI_factor = factor(BMI_string, levels=c("저체중", "정상", "과체중", "비만"))
as.numeric(BMI_factor)
data <- tribble(~"가명", ~"체중", ~"키", ~"재산",
"아이언맨", 70, 185, 1000,
'이기쁨', 48, 162, 1300,
'어피치', 40, 100, 999999999,
'무지', 20, 50, 999999999,
'뽀로로', 30, 50, 0,
'이상완', 100, 200,10000,
'곰돌이푸',20,85,1600000000000,
'B', 73.13, 183, 105,
'F', 45, 165, 10000000000000,
'YEAH', 170, 48, 10000,
'토르', 85, 185, 9999999999999,
'AA', 60, 100, 10000000,
'AAA', 76, 111, 10093,
'배수한', 180, 64, 1000,
'지현이', 46, 175,100000000000000000000000,
'응통', 50, 150, 7500,
'마라탕' ,1,30,12345678,
'금순이', 45, 156, 50000,
'이동석', 177, 68, 10000000000000,
'김원채',45,168,50000000,
'피카츄',100,50,1000000,
'abc', 50, 150, 3000)
class(data)
data
data2 = read.csv("clipboard")
summary(data2)
class(data2)
pokemon_df <- read_csv("C:/Users/thfgm/Desktop/pokemon.csv",
col_types = cols(
가명 = col_character(),
체중 = col_double(),
키 = col_double(),
재산 = col_double()
))
summary(pokemon_df)
pokemon_df <- read_csv("C:/Users/thfgm/Desktop/pokemon.csv",
col_types = cols(
가명 = col_character(),
체중 = col_double(),
키 = col_double(),
재산 = col_double()
))
summary(pokemon_df)
pokemon_df <- read_csv("C:/Users/thfgm/Desktop/pokemon.csv",
col_types = cols(
가명 = col_character(),
체중 = col_double(),
키 = col_double(),
재산 = col_double()
))
summary(pokemon_df)
pokemon_df <- read_csv("C:/Users/thfgm/Desktop/pokemon.csv",
col_types = cols(
가명 = col_character(),
체중 = col_double(),
키 = col_double(),
재산 = col_double()
))
summary(pokemon_df)
model_df <- pokemon_df %>%
mutate(부자여부 = ifelse(재산 > median(pokemon_df$재산), "부자", "안부자")) %>%
mutate(부자여부 = factor(부자여부, levels=c("안부자", "부자"))) %>%
select(-가명)
model_df %>%
DT::datatable()
BMI_df = data.frame("BMI" = BMI, "BMI_요인"=BMI_factor, "BMI_문자열"=BMI_string)
View(BMI_df)
datasets::mtcars
colnames(mtcars)
View(mtcars)
nrows(mtcars)
nrow(mtcars)
str(mtcars)
summary(mtcars)
rstudio_viewer('dataframe.html', file_path = 'C:/Users/thfgm/Desktop/데사입/ds_yonsei')
datasets::mtcars #::치면 사용가능한 parameter 나옴
colnames(mtcars)
nrow(mtcars)
str(mtcars)
summary(mtcars)
View(mtcars) #데이터가 많을 때는 시각적으로 데이터 이해하기 어렵다. 그래서 위에 코드로 확인하는게 더 나음.
str(mtcars)
library(tidyverse)
mtcars %>%
select(mpg, am, wt, hp) %>%  #mtcars의 변수 중 4개만 선택
filter(mpg > 25) %>%
arrange(desc(mpg)) %>%  #역순 정렬 원하면 desc o.w arrange(mpg)
mutate(metric = hp/wt)
mtcars %>%
mutate(auto_yn = ifelse(am == 1,
"AUTO", "수동")) %>%
group_by(auto_yn) %>%
summarise(mean_mpg = mean(mpg), max_mpg = max(mpg))
rstudio_viewer('dataframe.html', file_path = 'C:/Users/thfgm/Desktop/데사입/ds_yonsei')
library(tidyverse)
library(tidyverse)
mtcars %>%
select(mpg, am, wt, hp) %>%  #mtcars의 변수 중 4개만 선택
filter(mpg > 25) %>%
arrange(desc(mpg)) %>%  #역순 정렬 원하면 desc o.w arrange(mpg)
mutate(metric = hp/wt)
mtcars %>%
mutate(auto_yn = ifelse(am == 1,
"AUTO", "수동")) %>%
group_by(auto_yn) %>%
summarise(mean_mpg = mean(mpg), max_mpg = max(mpg), 차댓수 = n())
mtcars %>%
select(mpg, am, wt, hp) %>%  #mtcars의 변수 중 4개만 선택
filter(mpg > 25) %>%
arrange(desc(mpg)) %>%  #역순 정렬 원하면 desc o.w arrange(mpg)
mutate(metric = hp/wt)
mtcars %>%
mutate(auto_yn = ifelse(am == 1,
"AUTO", "수동")) %>%
group_by(auto_yn) %>%
summarise(mean_mpg = mean(mpg),
median_mpg = median(mpg),
max_mpg = max(mpg),
min_mpg = min(mpg),
std_mpg = sd(mpg),
차댓수 = n())
mtcars %>%
select(mpg, am, wt, hp) %>%  #mtcars의 변수 중 4개만 선택
filter(mpg > 25) %>%
arrange(desc(mpg)) %>%  #역순 정렬 원하면 desc o.w arrange(mpg)
mutate(metric = hp/wt)
datasets::mtcars #::치면 사용가능한 parameter 나옴
colnames(mtcars)
nrow(mtcars)
str(mtcars)
summary(mtcars)
View(mtcars) #데이터가 많을 때는 시각적으로 데이터 이해하기 어렵다. 그래서 위에 코드로 확인하는게 더 나음.
str(mtcars)
mtcars %>%
select(mpg, am, wt, hp) %>%
filter(mpg > 25) %>%
arrange(desc(mpg)) %>%
mutate(metric = hp/wt)
mtcars %>%
mutate(auto_yn = ifelse(am == 1,
"AUTO", "수동")) %>%
group_by(auto_yn) %>%
summarise(mean_mpg = mean(mpg),
median_mpg = median(mpg),
max_mpg = max(mpg),
min_mpg = min(mpg),
std_mpg = sd(mpg),
차댓수 = n())
datasets::mtcars #::치면 사용가능한 parameter 나옴
colnames(mtcars)
nrow(mtcars)
str(mtcars)
summary(mtcars)
View(mtcars) #데이터가 많을 때는 시각적으로 데이터 이해하기 어렵다. 그래서 위에 코드로 확인하는게 더 나음.
str(mtcars)
mtcars %>%
select(mpg, am, wt, hp) %>%
filter(mpg > 25) %>%
arrange(desc(mpg)) %>%
mutate(metric = hp/wt)
mtcars %>%
mutate(auto_yn = ifelse(am == 1,
"AUTO", "수동")) %>%
group_by(auto_yn) %>%
summarise(mean_mpg = mean(mpg),
median_mpg = median(mpg),
max_mpg = max(mpg),
min_mpg = min(mpg),
std_mpg = sd(mpg),
차댓수 = n())
datasets::mtcars #::치면 사용가능한 parameter 나옴
colnames(mtcars)
nrow(mtcars)
str(mtcars)
summary(mtcars)
View(mtcars) #데이터가 많을 때는 시각적으로 데이터 이해하기 어렵다. 그래서 위에 코드로 확인하는게 더 나음.
str(mtcars)
mtcars %>%
select(mpg, am, wt, hp) %>%
filter(mpg > 25) %>%
arrange(desc(mpg)) %>%
mutate(metric = hp/wt)
datasets::mtcars #::치면 사용가능한 parameter 나옴
colnames(mtcars)
nrow(mtcars)
str(mtcars)
summary(mtcars)
View(mtcars) #데이터가 많을 때는 시각적으로 데이터 이해하기 어렵다. 그래서 위에 코드로 확인하는게 더 나음.
mtcars %>%
mutate(auto_yn = ifelse(am == 1,
"AUTO", "수동")) %>%
group_by(auto_yn) %>%
summarise(mean_mpg = mean(mpg),
median_mpg = median(mpg),
max_mpg = max(mpg),
min_mpg = min(mpg),
std_mpg = sd(mpg),
차댓수 = n())
mtcars %>%
select(mpg, am, wt, hp) %>%
filter(mpg > 25) %>%
arrange(desc(mpg)) %>%
mutate(metric = hp/wt)
library(tidyverse)
mtcars %>%
select(mpg, am, wt, hp) %>%
filter(mpg > 25) %>%
arrange(desc(mpg)) %>%
mutate(metric = hp/wt)
mtcars %>%
select(mpg, am, wt, hp) %>%
filter(mpg > 25) %>%
arrange(desc(mpg)) %>%
mutate(metric = hp/wt)
mtcars %>%
mutate(auto_yn = ifelse(am == 1,
"AUTO", "수동")) %>%
group_by(auto_yn) %>%
summarise(mean_mpg = mean(mpg),
median_mpg = median(mpg),
max_mpg = max(mpg),
min_mpg = min(mpg),
std_mpg = sd(mpg),
차댓수 = n())
mtcars %>%
mutate(auto_yn = ifelse(am == 1,
"AUTO", "수동")) %>%
group_by(auto_yn) %>%
summarise(mean_mpg = mean(mpg),
median_mpg = median(mpg),
max_mpg = max(mpg),
min_mpg = min(mpg),
std_mpg = sd(mpg),
차댓수 = n())
mtcars %>%
mutate(auto_yn = ifelse(am == 1,
"AUTO", "수동")) %>%
group_by(auto_yn) %>%
summarise(mean_mpg = mean(mpg),
median_mpg = median(mpg),
max_mpg = max(mpg),
min_mpg = min(mpg),
std_mpg = sd(mpg),
차댓수 = n())
mtcars %>%
mutate(auto_yn = ifelse(am == 1,
"AUTO", "수동")) %>%
group_by(auto_yn) %>%
summarise(mean_mpg = mean(mpg),
median_mpg = median(mpg),
max_mpg = max(mpg),
min_mpg = min(mpg),
std_mpg = sd(mpg),
차댓수 = n())
mtcars %>%
mutate(auto_yn = ifelse(am == 1,
"AUTO", "수동")) %>%
group_by(auto_yn) %>%
summarise(mean_mpg = mean(mpg),
median_mpg = median(mpg),
max_mpg = max(mpg),
min_mpg = min(mpg),
std_mpg = sd(mpg),
차댓수 = n())
knitr::opts_chunk$set(echo = TRUE)
datasets::mtcars #::치면 사용가능한 parameter 나옴
colnames(mtcars)
nrow(mtcars)
str(mtcars)
summary(mtcars)
View(mtcars) #데이터가 많을 때는 시각적으로 데이터 이해하기 어렵다. 그래서 위에 코드로 확인하는게 더 나음.
str(mtcars)
mtcars %>%
select(mpg, am, wt, hp) %>%
filter(mpg > 25) %>%
arrange(desc(mpg)) %>%
mutate(metric = hp/wt)
mtcars %>%
mutate(auto_yn = ifelse(am == 1,
"AUTO", "수동")) %>%
group_by(auto_yn) %>%
summarise(mean_mpg = mean(mpg),
median_mpg = median(mpg),
max_mpg = max(mpg),
min_mpg = min(mpg),
std_mpg = sd(mpg),
차댓수 = n())
mtcars %>%
mutate(auto_yn = ifelse(am == 1,
"AUTO", "수동")) %>%
group_by(auto_yn) %>%
summarise(mean_mpg = mean(mpg),
median_mpg = median(mpg),
max_mpg = max(mpg),
min_mpg = min(mpg),
std_mpg = sd(mpg),
차댓수 = n(mpg))
mtcars %>%
mutate(auto_yn = ifelse(am == 1,
"AUTO", "수동")) %>%
group_by(auto_yn) %>%
summarise(mean_mpg = mean(mpg),
median_mpg = median(mpg),
max_mpg = max(mpg),
min_mpg = min(mpg),
std_mpg = sd(mpg),
차댓수 = n())
mtcars %>%
select(mpg, am, wt, hp) %>%
filter(mpg > 25) %>%
arrange(desc(mpg)) %>%
mutate(metric = hp/wt)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
datasets::mtcars #::치면 사용가능한 parameter 나옴
colnames(mtcars)
nrow(mtcars)
str(mtcars)
summary(mtcars)
View(mtcars) #데이터가 많을 때는 시각적으로 데이터 이해하기 어렵다. 그래서 위에 코드로 확인하는게 더 나음.
str(mtcars)
mtcars %>%
select(mpg, am, wt, hp) %>%
filter(mpg > 25) %>%
arrange(desc(mpg)) %>%
mutate(metric = hp/wt)
mtcars %>%
mutate(auto_yn = ifelse(am == 1,
"AUTO", "수동")) %>%
group_by(auto_yn) %>%
summarise(mean_mpg = mean(mpg),
median_mpg = median(mpg),
max_mpg = max(mpg),
min_mpg = min(mpg),
std_mpg = sd(mpg),
차댓수 = n())
knitr::opts_chunk$set(echo = TRUE)
hist(rnorm(100))
height <- c(170, 180, 190, 185)
height * 1.01 #계산이 됩니당
weight <- c(70, 80, 90, 80)
BMI <- weight/ height^2
library(tidyverse)
BMI_string <- c("비만", "저체중", "정상", "정상")
BMI_string
paste(BMI_string, collapse = "+")
paste(BMI_string, collapse = ",")
BMI_factor = factor(BMI_string, levels=c("저체중", "정상", "과체중", "비만"))
as.numeric(BMI_factor)
data <- tribble(~"가명", ~"체중", ~"키", ~"재산",
"아이언맨", 70, 185, 1000,
'이기쁨', 48, 162, 1300,
'어피치', 40, 100, 999999999,
'무지', 20, 50, 999999999,
'뽀로로', 30, 50, 0,
'이상완', 100, 200,10000,
'곰돌이푸',20,85,1600000000000,
'B', 73.13, 183, 105,
'F', 45, 165, 10000000000000,
'YEAH', 170, 48, 10000,
'토르', 85, 185, 9999999999999,
'AA', 60, 100, 10000000,
'AAA', 76, 111, 10093,
'배수한', 180, 64, 1000,
'지현이', 46, 175,100000000000000000000000,
'응통', 50, 150, 7500,
'마라탕' ,1,30,12345678,
'금순이', 45, 156, 50000,
'이동석', 177, 68, 10000000000000,
'김원채',45,168,50000000,
'피카츄',100,50,1000000,
'abc', 50, 150, 3000)
class(data)
data
data2 = read.csv("clipboard")
summary(data2)
class(data2)
pokemon_df <- read_csv("C:/Users/thfgm/Desktop/pokemon.csv",
col_types = cols(
가명 = col_character(),
체중 = col_double(),
키 = col_double(),
재산 = col_double()
))
summary(pokemon_df)
model_df <- pokemon_df %>%
mutate(부자여부 = ifelse(재산 > median(pokemon_df$재산), "부자", "안부자")) %>%
mutate(부자여부 = factor(부자여부, levels=c("안부자", "부자"))) %>%
select(-가명)
model_df %>%
DT::datatable()
BMI_df = data.frame("BMI" = BMI, "BMI_요인"=BMI_factor, "BMI_문자열"=BMI_string)
View(BMI_df)
knitr::opts_chunk$set(echo = TRUE)
datasets::mtcars #::치면 사용가능한 parameter 나옴
colnames(mtcars)
nrow(mtcars)
str(mtcars)
summary(mtcars)
View(mtcars) #데이터가 많을 때는 시각적으로 데이터 이해하기 어렵다. 그래서 위에 코드로 확인하는게 더 나음.
str(mtcars)
mtcars %>%
select(mpg, am, wt, hp) %>%
filter(mpg > 25) %>%
arrange(desc(mpg)) %>%
mutate(metric = hp/wt)
mtcars %>%
mutate(auto_yn = ifelse(am == 1,
"AUTO", "수동")) %>%
group_by(auto_yn) %>%
summarise(mean_mpg = mean(mpg),
median_mpg = median(mpg),
max_mpg = max(mpg),
min_mpg = min(mpg),
std_mpg = sd(mpg),
차댓수 = n())
